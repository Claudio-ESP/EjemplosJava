public class Animal {
  void bark() {
    System.out.println("Woof-Woof");
  }
}


----------------------------------------------------------

public class Animal {
    void bark() {
        System.out.println("Woof-Woof");
    }
}

class MyClass {
    public static void main(String[ ] args) {
        Animal dog = new Animal();
        dog.bark();
    }
}


----------------------------------------------------------- 



public class Main {
    public static void main(String[] args) {
        //create a Loading object with the same name
       Loading loading = new Loading();

        loading.LoadingMessage();
    }



    }
class Loading {
    //complete the class, add LoadingMessage() method
    public void LoadingMessage() {
        System.out.println("Loading");
    }


}



------------------------------------------------------------


public class Vehicle {
  int maxSpeed;
  int wheels;
  String color;
  double fuelCapacity;  

  void horn() {
    System.out.println("Beep!");
  }  
}


-------------------------------------------------------------

public class Vehicle {
    int maxSpeed;
    int wheels;
    String color;
    double fuelCapacity;  
    
    void horn() {
        System.out.println("Beep!");
    }

    void color(){
        System.out.println(color);
    }
}

class MyClass {
    public static void main(String[ ] args) {
        Vehicle v1 = new Vehicle();
        Vehicle v2 = new Vehicle();
        v1.color = "red";
        v1.color();
        v2.horn();
    }
}

----------------------------------------------------------


import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner read = new Scanner(System.in);
        String firstName = read.nextLine();
        String secondName = read.nextLine();
        int age = read.nextInt();
        int roomNumber = read.nextInt();
        Customer customer = new Customer();
        //set customer's data to object here
        customer.setFirstName(firstName);
        customer.setSecondName(secondName);
        customer.setAge(age);
        customer.setRoomNumber(roomNumber);

        customer.saveCustomerInfo();
    }

    }
class Customer {
    //add all necessary attributes here
    private String firstName;
    private String secondName;
    private int age;
    private int roomNumber;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getSecondName() {
        return secondName;
    }

    public void setSecondName(String secondName) {
        this.secondName = secondName;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public void setRoomNumber(int roomNumber) {
        this.roomNumber = roomNumber;
    }


    public void saveCustomerInfo() {
        System.out.println("First name: " + firstName);
        System.out.println("Second name: " + secondName);
        System.out.println("Age: " + age);
        System.out.println("Room number: " + roomNumber);
    }
}



-----------------------------------------------------



public class Vehicle {
  private String color;

  // Getter
  public String getColor() {
    return color;
  }

 // Setter
  public void setColor(String c) {
    this.color = c;
  }
}


-----------------------------------------------------


public class Vehicle {
    private String color;
    
    // Getter
    public String getColor() {
        return color;
    }
    
    // Setter
    public void setColor(String c) {
        this.color = c;
    }
}

class Program {
    public static void main(String[ ] args) {
        Vehicle v1 = new Vehicle();
        v1.setColor("Red");
        System.out.println(v1.getColor());
    }
}


--------------------------------------------

public class Vehicle {
    private String color;
    
    // Getter
    public String getColor() {
        return color;
    }
    
    // Setter
    public void setColor(String c) {
        this.color = c;
    }
}

class Program {
    public static void main(String[ ] args) {
        Vehicle v1 = new Vehicle();
        v1.setColor("Red");
        System.out.println(v1.getColor());
    }
}

----------------------------------------------


import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner read = new Scanner(System.in);
        String name = read.nextLine();
        int age = read.nextInt();
        Student student = new Student();
        student.name = name;
        student.setAge(age);

        //set the age via Setter

        if (age<0){
            System.out.println("Invalid age");
            student.setAge(age =0);
        }

        System.out.println("Name: " + student.name);
        System.out.println("Age: " + student.getAge());
    }

    }
class Student {
    public String name;
    private int age;
    
    public int getAge() {
        //complete Getter
        return age;

    }
    public void setAge(int age) {
        //complete Setter
        this.age = age;

    }
}


------------------------------------------------


package Logica;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

public class MystiMonstersGUI extends JFrame {

    
	private static final long serialVersionUID = 1L;
	private JLabel background;
    private JLabel entrenador;

    public MystiMonstersGUI() {
        setTitle("MystiMonsters Game");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Configura el fondo
        background = new JLabel(new ImageIcon("resources/mapa2.png"));
        background.setBounds(0, 0, 800, 600);

        // Configura el personaje "Entrenador"
        entrenador = new JLabel(new ImageIcon("resources/Entrenador.png"));
        entrenador.setBounds(100, 400, 100, 100);

        // Agrega los componentes al contenedor
        getContentPane().add(background);
        getContentPane().add(entrenador);

        setLayout(null);  // Usamos un diseño absoluto para posicionar los componentes
        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new MystiMonstersGUI();
        });
    }
}



-----------------------------------------------------

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


-Tengo una clase para cada pokemon que son : Floraflame.java, Hidroscuro.java, Igniverno.java, 
Rocluminis.java,                                                                                                                                                            
-Tambien tengo interface de: IAgua.java, IElectrico.java, IFuego.java, IPlanta.java                                        
-Tengo el main que se llama: MystiMonsters.java                                                                                                        
-Y la interfaz grafica donde esta el mapa2 y el entrenador que se llama:  MystiMonstersGUI.java         
-Y por ultimo otra clase abstracta con informacion de los pokemon que se llama: MystiMonstersGeneral.java                                                                                                                                                                   
Teniendo en cuenta toda esta información lo primero que quiero seguir desarrollando en mi proyecto es la interfaz gráfica,            


-------------------------------------------------------------

package Logica;

import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class MystiMonstersGUI extends JFrame {

    private JLabel background;
    private JLabel entrenador;
    private int entrenadorX; // Posición X del personaje
    private int entrenadorY; // Posición Y del personaje
    

    public MystiMonstersGUI() {
        setTitle("MystiMonsters Game");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Inicializa la posición del personaje
        entrenadorX = 100;
        entrenadorY = 400;

        // Configura el fondo
        background = new JLabel(new ImageIcon("resources/mapa2.png"));
        
        background.setBounds(0, 0, 800, 600);

        // Configura el personaje "Entrenador" y hazlo más pequeño
        entrenador = new JLabel(new ImageIcon("resources/entrenador.png"));
        entrenador.setBounds(entrenadorX, entrenadorY, 50, 50); // Cambia el tamaño a 50x50

        // Agrega el fondo al contenedor primero para que esté en la parte posterior
        getContentPane().add(background);
        // Luego, agrega el personaje para que esté en la parte delantera
        getContentPane().add(entrenador,0);
        
        
        setLayout(null);  // Usamos un diseño absoluto para posicionar los componentes
        setVisible(true);

        // Agrega un KeyListener para controlar el movimiento del personaje
        addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                // No es necesario implementar este método
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                int step = 10; // Cantidad de píxeles para mover al personaje

                if (keyCode == KeyEvent.VK_LEFT) {
                    // Mover el personaje hacia la izquierda
                    entrenadorX -= step;
                } else if (keyCode == KeyEvent.VK_RIGHT) {
                    // Mover el personaje hacia la derecha
                    entrenadorX += step;
                } else if (keyCode == KeyEvent.VK_UP) {
                    // Mover el personaje hacia arriba
                    entrenadorY -= step;
                } else if (keyCode == KeyEvent.VK_DOWN) {
                    // Mover el personaje hacia abajo
                    entrenadorY += step;
                }
                
                

                // Actualizar la posición del personaje
                entrenador.setBounds(entrenadorX, entrenadorY, 50, 50);
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // No es necesario implementar este método
            }
        });

        setFocusable(true);
        requestFocusInWindow();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new MystiMonstersGUI();
        });
    }
}

-----------------------------------------------------

package Logica;

import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class MystiMonstersGUI extends JFrame {

    private JLabel background;
    private JLabel entrenador;
    private int entrenadorX; // Posición X del personaje
    private int entrenadorY; // Posición Y del personaje
    private boolean cambioDeMapa; // Bandera para cambiar de mapa

    public MystiMonstersGUI() {
        setTitle("MystiMonsters Game");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Inicializa la posición del personaje
        entrenadorX = 100;
        entrenadorY = 400;

        // Configura el fondo con el mapa actual
        background = new JLabel(new ImageIcon("resources/mapa2.png"));
        background.setBounds(0, 0, 800, 600);

        // Configura el personaje "Entrenador" y hazlo más pequeño
        entrenador = new JLabel(new ImageIcon("resources/Entrenador.png"));
        entrenador.setBounds(entrenadorX, entrenadorY, 50, 50); // Cambia el tamaño a 50x50

        // Agrega el fondo al contenedor primero
        getContentPane().add(background);
        // Luego, agrega el personaje para que esté en la parte delantera
        getContentPane().add(entrenador,0);

        // Cambia el orden de dibujo para que el personaje esté encima del fondo
        

        setLayout(null);  // Usamos un diseño absoluto para posicionar los componentes
        setVisible(true);
        cambioDeMapa = false;

        // Agrega un KeyListener para controlar el movimiento del personaje
        addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                // No es necesario implementar este método
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                int step = 10; // Cantidad de píxeles para mover al personaje

                if (!cambioDeMapa) {
                    if (keyCode == KeyEvent.VK_LEFT) {
                        // Mover el personaje hacia la izquierda
                        entrenadorX -= step;
                    } else if (keyCode == KeyEvent.VK_RIGHT) {
                        // Mover el personaje hacia la derecha
                        entrenadorX += step;
                    } else if (keyCode == KeyEvent.VK_UP) {
                        // Mover el personaje hacia arriba
                        entrenadorY -= step;
                    } else if (keyCode == KeyEvent.VK_DOWN) {
                        // Mover el personaje hacia abajo
                        entrenadorY += step;
                    }

                    // Comprueba si el personaje llegó al final del mapa actual
                    if (entrenadorX > 800) {
                        // Cambia el mapa a "maparoca.png" y actualiza la posición del personaje
                        background.setIcon(new ImageIcon("resources/maparocapeque.png"));
                        entrenadorX = 100; // Reinicia la posición del personaje
                        cambioDeMapa = true;
                    }

                    // Actualiza la posición del personaje
                    entrenador.setBounds(entrenadorX, entrenadorY, 50, 50);
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // No es necesario implementar este método
            }
        });

        setFocusable(true);
        requestFocusInWindow();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new MystiMonstersGUI();
        });
    }
}


------------------------------------------------




